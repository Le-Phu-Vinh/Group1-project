// backend/middleware/authMiddleware.js

const jwt = require('jsonwebtoken');
// Gi·∫£ ƒë·ªãnh b·∫°n c√≥ m·ªôt model User ƒë·ªÉ t√¨m ki·∫øm ng∆∞·ªùi d√πng sau khi gi·∫£i m√£ token
const User = require('../models/User'); // C·∫ßn c·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c

const JWT_SECRET = process.env.JWT_SECRET || 'your_default_secret_key'; 


// H√†m Middleware ƒë·ªÉ b·∫£o v·ªá c√°c route (endpoint)
const protect = async (req, res, next) => {
    let token;

    // 1. Ki·ªÉm tra header Authorization
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            // L·∫•y token t·ª´ header (d·∫°ng: "Bearer <token>")
            token = req.headers.authorization.split(' ')[1];

            // 2. Gi·∫£i m√£ token
            // Thay 'YOUR_JWT_SECRET' b·∫±ng secret key th·ª±c t·∫ø c·ªßa b·∫°n
            const decoded = jwt.verify(token, JWT_SECRET ); 

            // 3. T√¨m ng∆∞·ªùi d√πng v√† g·∫Øn v√†o ƒë·ªëi t∆∞·ª£ng request
            // .select('-password') ƒë·ªÉ kh√¥ng bao g·ªìm m·∫≠t kh·∫©u
            const user = await User.findById(decoded.id).select('-password');

            if (!user) {
                 // N·∫øu token h·ª£p l·ªá nh∆∞ng user kh√¥ng c√≤n trong DB
                 return res.status(401).json({ message: 'Not authorized, user not found' });
            }

            // üõë TH√äM B∆Ø·ªöC 4: Ki·ªÉm tra xem user c√≥ ƒë·ªïi m·∫≠t kh·∫©u (hay th√¥ng tin quan tr·ªçng) sau khi token ƒë∆∞·ª£c c·∫•p kh√¥ng
            if (user.passwordChangedAt) {
                const changedTimestamp = parseInt(user.passwordChangedAt.getTime() / 1000, 10);
                
                // N·∫øu th·ªùi ƒëi·ªÉm thay ƒë·ªïi (changedTimestamp) L·ªöN H∆†N th·ªùi ƒëi·ªÉm c·∫•p token (decoded.iat)
                if (changedTimestamp > decoded.iat) {
                    return res.status(401).json({ message: 'Not authorized, password/info recently changed. Please log in again.' });
                }
            }

            // 4. Chuy·ªÉn sang middleware ho·∫∑c controller ti·∫øp theo 
            req.user = user; 
            next();
        } catch (error) {
            console.error(error);
            // L·ªói khi token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
            res.status(401).json({ message: 'Not authorized, token failed' });
        }
    }

    // N·∫øu kh√¥ng c√≥ token trong header
    if (!token) {
        return res.status(401).json({ message: 'Not authorized, no token' });
    }
};

module.exports = protect ;